{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { connectApi } from \"../common/services/ConnectApi\";\nexport function useFetch(url, options, stateActualize) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFetching = _useState4[0],\n      setIsFetching = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    connectApi.get(url, options).then(function (response) {\n      setData(Object.entries(response.data));\n    }).catch(function (error) {\n      setError(error);\n    }).finally(function () {\n      setIsFetching(false);\n    });\n  }, [stateActualize]);\n  return {\n    data: data,\n    isFetching: isFetching,\n    error: error\n  };\n}","map":{"version":3,"names":["useState","useEffect","connectApi","useFetch","url","options","stateActualize","data","setData","isFetching","setIsFetching","error","setError","get","then","response","Object","entries","catch","finally"],"sources":["C:/Users/felip/AppIbavNovo/app/src/hooks/useFetch.tsx"],"sourcesContent":["import { AxiosRequestConfig } from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { connectApi } from \"../common/services/ConnectApi\";\r\n\r\nexport function useFetch<T = unknown>(\r\n  url: string,\r\n  options?: AxiosRequestConfig,\r\n  stateActualize?: any\r\n) {\r\n  const [data, setData] = useState<T | any>(null);\r\n  const [isFetching, setIsFetching] = useState(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  useEffect(() => {\r\n    connectApi\r\n      .get(url, options)\r\n      .then((response) => {\r\n        setData(Object.entries(response.data));\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n      })\r\n      .finally(() => {\r\n        setIsFetching(false);\r\n      });\r\n  }, [stateActualize]);\r\n\r\n  return { data, isFetching, error };\r\n}\r\n"],"mappings":";AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT;AAEA,OAAO,SAASC,QAAT,CACLC,GADK,EAELC,OAFK,EAGLC,cAHK,EAIL;EACA,gBAAwBN,QAAQ,CAAU,IAAV,CAAhC;EAAA;EAAA,IAAOO,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAAoCR,QAAQ,CAAC,IAAD,CAA5C;EAAA;EAAA,IAAOS,UAAP;EAAA,IAAmBC,aAAnB;;EACA,iBAA0BV,QAAQ,CAAe,IAAf,CAAlC;EAAA;EAAA,IAAOW,KAAP;EAAA,IAAcC,QAAd;;EAEAX,SAAS,CAAC,YAAM;IACdC,UAAU,CACPW,GADH,CACOT,GADP,EACYC,OADZ,EAEGS,IAFH,CAEQ,UAACC,QAAD,EAAc;MAClBP,OAAO,CAACQ,MAAM,CAACC,OAAP,CAAeF,QAAQ,CAACR,IAAxB,CAAD,CAAP;IACD,CAJH,EAKGW,KALH,CAKS,UAACP,KAAD,EAAW;MAChBC,QAAQ,CAACD,KAAD,CAAR;IACD,CAPH,EAQGQ,OARH,CAQW,YAAM;MACbT,aAAa,CAAC,KAAD,CAAb;IACD,CAVH;EAWD,CAZQ,EAYN,CAACJ,cAAD,CAZM,CAAT;EAcA,OAAO;IAAEC,IAAI,EAAJA,IAAF;IAAQE,UAAU,EAAVA,UAAR;IAAoBE,KAAK,EAALA;EAApB,CAAP;AACD"},"metadata":{},"sourceType":"module"}